import cv2
import mediapipe as mp
import pyautogui
import time

# MediaPipe setup
mpHands = mp.solutions.hands
hands = mpHands.Hands(max_num_hands=1, min_detection_confidence=0.7)
mpDraw = mp.solutions.drawing_utils

cap = cv2.VideoCapture(0)
frame_width = int(cap.get(3))
frame_height = int(cap.get(4))

cooldown = 0.6
last_action_time = 0

def count_fingers(lmList):
    fingers = []

    # Thumb
    if lmList[4][1] < lmList[3][1]:
        fingers.append(1)
    else:
        fingers.append(0)

    # Other four fingers
    for tipId in [8, 12, 16, 20]:
        if lmList[tipId][2] < lmList[tipId - 2][2]:
            fingers.append(1)
        else:
            fingers.append(0)

    return fingers.count(1)

while True:
    success, img = cap.read()
    img = cv2.flip(img, 1)
    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = hands.process(imgRGB)

    lmList = []
    current_time = time.time()
    x_center = None

    if results.multi_hand_landmarks:
        for handLms in results.multi_hand_landmarks:
            mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)

            for id, lm in enumerate(handLms.landmark):
                cx, cy = int(lm.x * frame_width), int(lm.y * frame_height)
                lmList.append((id, cx, cy))

            x_center = int(handLms.landmark[9].x * frame_width)  # Palm center (landmark 9)

    if lmList and current_time - last_action_time > cooldown:
        finger_count = count_fingers(lmList)
        cv2.putText(img, f'Fingers: {finger_count}', (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 255, 0), 3)

        if finger_count == 1:
            pyautogui.press("up")
            print("Gesture: 1 Finger → Jump")
            last_action_time = current_time
        elif finger_count == 2:
            pyautogui.press("down")
            print("Gesture: 2 Fingers → Slide")
            last_action_time = current_time
        elif finger_count == 5 and x_center:
            if x_center < frame_width // 3:
                pyautogui.press("left")
                print("Gesture: Palm Left Side → Move Left")
                last_action_time = current_time
            elif x_center > 2 * frame_width // 3:
                pyautogui.press("right")
                print("Gesture: Palm Right Side → Move Right")
                last_action_time = current_time

    cv2.imshow("Temple Run - Hand Gesture Control", img)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
